name: üß™ Run Python Tests (Poetry 2.x)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false # Don't cancel other matrix jobs if one fails
      matrix:
        # Based on your poetry.lock, Python >=3.9 is required.
        # Python 3.12 is the current stable.
        # Python 3.13 has wheels in your lock, so it's likely compatible.
        # Avoid 3.14 for now, as it's too early stage for stable CI.
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - name: ‚¨áÔ∏è Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        # Crucial for Python 3.13 as it's a pre-release
        allow-prereleases: true
        # Cache Python dependencies (optional but recommended for speed)
        cache: 'poetry'

    - name: üì¶ Install Poetry ${{ env.POETRY_VERSION }}
      # This action is specifically designed for Poetry 2.x and above
      # It allows pinning the exact version from your poetry.lock
      uses: python-poetry/setup-poetry@v1
      with:
        poetry-version: 2.1.3 # Pin this to match your poetry.lock
        # No need for virtualenvs-create/in-project/path here; poetry install handles it
        # This action sets up Poetry correctly in the PATH

    - name: üß∞ Install dependencies
      # Use --no-root if your package isn't meant to be installed in the venv for tests,
      # but rather you're importing local modules. Otherwise, use `poetry install`.
      # If your tests import your package as if it were installed (`import your_package_name`),
      # then `poetry install` (without --no-root) is generally correct.
      run: poetry install --no-interaction --no-ansi

    - name: üß™ Run tests
      # This command will activate the poetry environment and run pytest
      run: poetry run pytest